# Generated by Django 5.2.7 on 2025-10-30 03:42

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID primary key for security (prevents ID enumeration)', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Category name (e.g., 'Plant Care', 'Pest Control')", max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly slug (auto-generated from name)', max_length=120, unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description shown on category page')),
                ('icon', models.CharField(blank=True, help_text="Icon name (e.g., 'leaf', 'bug') for UI display", max_length=50)),
                ('display_order', models.IntegerField(default=0, help_text='Order for display (lower numbers first)')),
                ('is_active', models.BooleanField(default=True, help_text='Whether category is visible to users')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent category for hierarchical structure', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='forum.category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID primary key for security', primary_key=True, serialize=False)),
                ('content_raw', models.TextField(help_text='Raw content (plain text, Markdown, or Draft.js JSON string)', max_length=50000)),
                ('content_rich', models.JSONField(blank=True, help_text='Rich content in Draft.js format (for rich text posts)', null=True)),
                ('content_format', models.CharField(choices=[('plain', 'Plain Text'), ('markdown', 'Markdown'), ('rich', 'Rich Content (Draft.js)')], default='plain', help_text='Format of content (plain, markdown, or rich)', max_length=20)),
                ('is_first_post', models.BooleanField(default=False, help_text='True if this is the first post (topic post) in the thread')),
                ('is_active', models.BooleanField(default=True, help_text='Soft delete: inactive posts are hidden')),
                ('edited_at', models.DateTimeField(blank=True, help_text='Last time post was edited', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(help_text='User who created the post', on_delete=django.db.models.deletion.CASCADE, related_name='forum_posts', to=settings.AUTH_USER_MODEL)),
                ('edited_by', models.ForeignKey(blank=True, help_text='User who last edited the post (moderator or author)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='forum_posts_edited', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID primary key for security', primary_key=True, serialize=False)),
                ('image', models.ImageField(help_text='Image file (JPG, PNG, GIF, WebP)', upload_to='forum/attachments/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp'])])),
                ('original_filename', models.CharField(help_text='Original filename from upload', max_length=255)),
                ('file_size', models.IntegerField(help_text='File size in bytes (max 10.0MB)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10485760)])),
                ('mime_type', models.CharField(help_text="MIME type (e.g., 'image/jpeg')", max_length=100)),
                ('display_order', models.IntegerField(default=0, help_text='Order for display in post')),
                ('alt_text', models.CharField(blank=True, help_text='Alt text for accessibility', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(help_text='Post this attachment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='forum.post')),
            ],
            options={
                'verbose_name': 'Attachment',
                'verbose_name_plural': 'Attachments',
                'ordering': ['display_order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Reaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID primary key for security', primary_key=True, serialize=False)),
                ('reaction_type', models.CharField(choices=[('like', 'Like'), ('love', 'Love'), ('helpful', 'Helpful'), ('thanks', 'Thanks')], help_text='Type of reaction (like, love, helpful, thanks)', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='False if reaction was toggled off (removed)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('post', models.ForeignKey(help_text='Post being reacted to', on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='forum.post')),
                ('user', models.ForeignKey(help_text='User giving the reaction', on_delete=django.db.models.deletion.CASCADE, related_name='forum_reactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Reaction',
                'verbose_name_plural': 'Reactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID primary key for security', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Thread title (max 200 characters)', max_length=200)),
                ('slug', models.SlugField(help_text='URL-friendly slug with UUID suffix for uniqueness', max_length=250, unique=True)),
                ('excerpt', models.TextField(blank=True, help_text='Short excerpt for thread previews (max 500 chars)', max_length=500)),
                ('is_pinned', models.BooleanField(default=False, help_text='Pinned threads appear at top of category')),
                ('is_locked', models.BooleanField(default=False, help_text="Locked threads don't allow new posts")),
                ('is_active', models.BooleanField(default=True, help_text='Soft delete: inactive threads are hidden')),
                ('view_count', models.IntegerField(default=0, help_text='Number of times thread has been viewed', validators=[django.core.validators.MinValueValidator(0)])),
                ('post_count', models.IntegerField(default=0, help_text='Number of posts in this thread (cached for performance)', validators=[django.core.validators.MinValueValidator(0)])),
                ('last_activity_at', models.DateTimeField(blank=True, help_text='Last time a post was added (for sorting)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(help_text='User who created the thread', on_delete=django.db.models.deletion.CASCADE, related_name='forum_threads', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(help_text='Category this thread belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='threads', to='forum.category')),
            ],
            options={
                'verbose_name': 'Thread',
                'verbose_name_plural': 'Threads',
                'ordering': ['-is_pinned', '-last_activity_at', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='post',
            name='thread',
            field=models.ForeignKey(help_text='Thread this post belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='forum.thread'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID primary key for security', primary_key=True, serialize=False)),
                ('trust_level', models.CharField(choices=[('new', 'New Member'), ('basic', 'Basic Member'), ('trusted', 'Trusted Member'), ('veteran', 'Veteran'), ('expert', 'Expert')], default='new', help_text="User's trust level (new, basic, trusted, veteran, expert)", max_length=20)),
                ('post_count', models.IntegerField(default=0, help_text='Total posts created (cached for performance)', validators=[django.core.validators.MinValueValidator(0)])),
                ('thread_count', models.IntegerField(default=0, help_text='Total threads created (cached for performance)', validators=[django.core.validators.MinValueValidator(0)])),
                ('helpful_count', models.IntegerField(default=0, help_text="Number of 'helpful' reactions received", validators=[django.core.validators.MinValueValidator(0)])),
                ('last_seen_at', models.DateTimeField(blank=True, help_text='Last time user was active in forum', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(help_text='Linked Django user', on_delete=django.db.models.deletion.CASCADE, related_name='forum_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'ordering': ['-helpful_count', '-post_count'],
            },
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['slug'], name='forum_cat_slug_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['parent', 'is_active'], name='forum_cat_parent_active_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['display_order'], name='forum_cat_order_idx'),
        ),
        migrations.AddIndex(
            model_name='attachment',
            index=models.Index(fields=['post', 'display_order'], name='forum_attach_post_idx'),
        ),
        migrations.AddIndex(
            model_name='reaction',
            index=models.Index(fields=['post', 'reaction_type', 'is_active'], name='forum_react_post_type_idx'),
        ),
        migrations.AddIndex(
            model_name='reaction',
            index=models.Index(fields=['user', 'is_active'], name='forum_react_user_idx'),
        ),
        migrations.AddConstraint(
            model_name='reaction',
            constraint=models.UniqueConstraint(fields=('post', 'user', 'reaction_type'), name='unique_post_user_reaction'),
        ),
        migrations.AddIndex(
            model_name='thread',
            index=models.Index(fields=['slug'], name='forum_thread_slug_idx'),
        ),
        migrations.AddIndex(
            model_name='thread',
            index=models.Index(fields=['category', 'is_active', '-last_activity_at'], name='forum_thread_cat_active_idx'),
        ),
        migrations.AddIndex(
            model_name='thread',
            index=models.Index(fields=['-is_pinned', '-last_activity_at'], name='forum_thread_pin_activity_idx'),
        ),
        migrations.AddIndex(
            model_name='thread',
            index=models.Index(fields=['author', 'is_active'], name='forum_thread_author_idx'),
        ),
        migrations.AddIndex(
            model_name='thread',
            index=models.Index(fields=['-created_at'], name='forum_thread_created_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['thread', 'is_active', 'created_at'], name='forum_post_thread_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['author', 'is_active'], name='forum_post_author_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['-created_at'], name='forum_post_created_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['user'], name='forum_profile_user_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['trust_level', '-helpful_count'], name='forum_profile_trust_idx'),
        ),
    ]
