# Generated by Django 5.2.4 on 2025-08-19 22:27

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SearchQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the search query', unique=True)),
                ('query_text', models.TextField(help_text='The search query text')),
                ('content_type', models.CharField(choices=[('all', 'All Content'), ('forum', 'Forum Posts'), ('plants', 'Plant Species'), ('blog', 'Blog Posts'), ('diseases', 'Plant Diseases'), ('care_guides', 'Care Guides')], default='all', help_text='Type of content being searched', max_length=20)),
                ('session_key', models.CharField(blank=True, help_text='Session key for anonymous users', max_length=40, null=True)),
                ('results_count', models.IntegerField(default=0, help_text='Number of results returned')),
                ('response_time_ms', models.IntegerField(blank=True, help_text='Search response time in milliseconds', null=True)),
                ('filters_applied', models.JSONField(blank=True, default=dict, help_text='Filters that were applied to the search')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, help_text='User who performed the search (if logged in)', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SearchResultClick',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_type', models.CharField(help_text='Type of content that was clicked', max_length=20)),
                ('result_id', models.CharField(help_text='ID of the content that was clicked', max_length=100)),
                ('result_position', models.IntegerField(help_text='Position of the result in the search results (1-based)')),
                ('result_page', models.IntegerField(default=1, help_text='Page number where the result appeared')),
                ('session_key', models.CharField(blank=True, max_length=40, null=True)),
                ('clicked_at', models.DateTimeField(auto_now_add=True)),
                ('search_query', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='result_clicks', to='search.searchquery')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-clicked_at'],
            },
        ),
        migrations.CreateModel(
            name='UserSearchPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_content_type', models.CharField(choices=[('all', 'All Content'), ('forum', 'Forum Posts'), ('plants', 'Plant Species'), ('blog', 'Blog Posts'), ('diseases', 'Plant Diseases'), ('care_guides', 'Care Guides')], default='all', help_text='Default content type for searches', max_length=20)),
                ('results_per_page', models.IntegerField(default=20, help_text='Number of results to show per page')),
                ('save_search_history', models.BooleanField(default=True, help_text='Whether to save search history')),
                ('search_history_days', models.IntegerField(default=30, help_text='Number of days to keep search history')),
                ('enable_personalized_results', models.BooleanField(default=True, help_text='Enable personalized search results based on interests')),
                ('boost_expert_content', models.BooleanField(default=True, help_text='Boost results from expert users')),
                ('enable_search_alerts', models.BooleanField(default=False, help_text='Enable alerts for new content matching saved searches')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='search_preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SavedSearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='User-defined name for the saved search', max_length=100)),
                ('query_text', models.TextField(help_text='The search query text')),
                ('content_type', models.CharField(choices=[('all', 'All Content'), ('forum', 'Forum Posts'), ('plants', 'Plant Species'), ('blog', 'Blog Posts'), ('diseases', 'Plant Diseases'), ('care_guides', 'Care Guides')], default='all', max_length=20)),
                ('search_parameters', models.JSONField(default=dict, help_text='Complete search parameters including filters')),
                ('enable_alerts', models.BooleanField(default=False, help_text='Send alerts when new content matches this search')),
                ('alert_frequency', models.CharField(choices=[('immediate', 'Immediate'), ('daily', 'Daily Digest'), ('weekly', 'Weekly Digest')], default='daily', help_text='How often to send search alerts', max_length=20)),
                ('last_alert_sent', models.DateTimeField(blank=True, help_text='When the last alert was sent', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this saved search is active')),
                ('times_used', models.IntegerField(default=0, help_text='Number of times this saved search has been used')),
                ('last_used', models.DateTimeField(blank=True, help_text='When this saved search was last used', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_searches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_used', '-created_at'],
                'indexes': [models.Index(fields=['user', 'is_active'], name='search_save_user_id_49e8a0_idx'), models.Index(fields=['enable_alerts', 'alert_frequency'], name='search_save_enable__1d4820_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='searchquery',
            index=models.Index(fields=['query_text', 'content_type'], name='search_sear_query_t_923311_idx'),
        ),
        migrations.AddIndex(
            model_name='searchquery',
            index=models.Index(fields=['user', '-created_at'], name='search_sear_user_id_544a0a_idx'),
        ),
        migrations.AddIndex(
            model_name='searchquery',
            index=models.Index(fields=['session_key', '-created_at'], name='search_sear_session_d5f438_idx'),
        ),
        migrations.AddIndex(
            model_name='searchquery',
            index=models.Index(fields=['-created_at'], name='search_sear_created_29f94e_idx'),
        ),
        migrations.AddIndex(
            model_name='searchresultclick',
            index=models.Index(fields=['search_query', 'result_type'], name='search_sear_search__94e25e_idx'),
        ),
        migrations.AddIndex(
            model_name='searchresultclick',
            index=models.Index(fields=['result_type', 'result_id'], name='search_sear_result__66c300_idx'),
        ),
        migrations.AddIndex(
            model_name='searchresultclick',
            index=models.Index(fields=['-clicked_at'], name='search_sear_clicked_06b5df_idx'),
        ),
    ]
