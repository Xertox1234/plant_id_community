# Generated by Django 5.2.4 on 2025-08-13 17:17

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('plant_identification', '0006_savedcareinstructions'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for tracking', unique=True)),
                ('email_type', models.CharField(help_text='Type of email (from EmailType constants)', max_length=100)),
                ('recipient_email', models.EmailField(help_text='Email address of recipient', max_length=254, validators=[django.core.validators.EmailValidator()])),
                ('subject', models.CharField(help_text='Email subject line', max_length=200)),
                ('template_name', models.CharField(help_text='Template used for email', max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed'), ('bounced', 'Bounced'), ('delivered', 'Delivered'), ('opened', 'Opened'), ('clicked', 'Clicked')], default='pending', help_text='Current status of email', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', help_text='Email priority level', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('opened_at', models.DateTimeField(blank=True, null=True)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if sending failed')),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of retry attempts')),
                ('open_count', models.PositiveIntegerField(default=0, help_text='Number of times email was opened')),
                ('click_count', models.PositiveIntegerField(default=0, help_text='Number of times links were clicked')),
                ('user', models.ForeignKey(blank=True, help_text='User who received the email (if registered)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='email_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['email_type'], name='core_emailn_email_t_2441d9_idx'), models.Index(fields=['recipient_email'], name='core_emailn_recipie_f03923_idx'), models.Index(fields=['status'], name='core_emailn_status_5434fd_idx'), models.Index(fields=['created_at'], name='core_emailn_created_c136a1_idx'), models.Index(fields=['user', '-created_at'], name='core_emailn_user_id_91c496_idx')],
            },
        ),
        migrations.CreateModel(
            name='ForumNotificationSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('topic_reply', 'Topic Replies'), ('mention', 'Mentions'), ('new_topic', 'New Topics'), ('digest', 'Daily/Weekly Digest')], help_text='Type of forum notification', max_length=20)),
                ('frequency', models.CharField(choices=[('instant', 'Instant'), ('daily', 'Daily Digest'), ('weekly', 'Weekly Digest'), ('never', 'Never')], default='instant', help_text='How often to send notifications', max_length=20)),
                ('topic_id', models.PositiveIntegerField(blank=True, help_text='Specific topic ID (for topic reply notifications)', null=True)),
                ('forum_id', models.PositiveIntegerField(blank=True, help_text='Specific forum ID (for forum-specific notifications)', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this subscription is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_sent_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forum_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'is_active'], name='core_forumn_user_id_aedbee_idx'), models.Index(fields=['notification_type', 'frequency'], name='core_forumn_notific_11b2d8_idx')],
                'unique_together': {('user', 'notification_type', 'topic_id', 'forum_id')},
            },
        ),
        migrations.CreateModel(
            name='InAppNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(help_text='Notification title', max_length=200)),
                ('message', models.TextField(help_text='Notification message')),
                ('category', models.CharField(choices=[('plant_care', 'Plant Care'), ('forum', 'Forum'), ('identification', 'Plant Identification'), ('system', 'System'), ('community', 'Community')], default='system', max_length=20)),
                ('action_url', models.URLField(blank=True, help_text='URL to navigate to when clicked')),
                ('is_read', models.BooleanField(default=False, help_text='Whether user has read this notification')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_app_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'is_read'], name='core_inappn_user_id_1cbb59_idx'), models.Index(fields=['category'], name='core_inappn_categor_d0a7a1_idx'), models.Index(fields=['-created_at'], name='core_inappn_created_8ba56d_idx')],
            },
        ),
        migrations.CreateModel(
            name='PlantCareReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for secure references', unique=True)),
                ('plant_name', models.CharField(help_text='Name of the plant for this reminder', max_length=200)),
                ('plant_scientific_name', models.CharField(blank=True, help_text='Scientific name of the plant', max_length=200)),
                ('care_type', models.CharField(choices=[('watering', 'Watering'), ('fertilizing', 'Fertilizing'), ('pruning', 'Pruning'), ('repotting', 'Repotting'), ('inspection', 'Health Inspection'), ('cleaning', 'Leaf Cleaning')], help_text='Type of care this reminder is for', max_length=50)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly'), ('seasonal', 'Seasonal')], default='weekly', help_text='How often to send reminders', max_length=20)),
                ('custom_instructions', models.TextField(blank=True, help_text='Custom care instructions for this reminder')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this reminder is active')),
                ('next_reminder_date', models.DateTimeField(help_text='When to send the next reminder')),
                ('last_sent_at', models.DateTimeField(blank=True, help_text='When the last reminder was sent', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reminder_count', models.PositiveIntegerField(default=0, help_text='Number of reminders sent')),
                ('saved_care_instructions', models.ForeignKey(blank=True, help_text="Link to user's saved care instructions", null=True, on_delete=django.db.models.deletion.CASCADE, to='plant_identification.savedcareinstructions')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plant_care_reminders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['next_reminder_date'],
                'indexes': [models.Index(fields=['user', 'is_active'], name='core_plantc_user_id_a28d0f_idx'), models.Index(fields=['next_reminder_date', 'is_active'], name='core_plantc_next_re_c88157_idx'), models.Index(fields=['care_type'], name='core_plantc_care_ty_e61e0c_idx')],
            },
        ),
    ]
