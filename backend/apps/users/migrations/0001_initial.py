# Generated by Django 5.2.4 on 2025-08-05 21:31

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, help_text='Tell us about yourself and your plant interests', max_length=500)),
                ('location', models.CharField(blank=True, help_text='City, Country or general location', max_length=100)),
                ('website', models.URLField(blank=True, help_text='Your personal website or blog')),
                ('avatar', models.ImageField(blank=True, help_text='Upload a profile picture', null=True, upload_to='avatars/')),
                ('gardening_experience', models.CharField(blank=True, choices=[('beginner', 'Beginner (< 1 year)'), ('intermediate', 'Intermediate (1-5 years)'), ('advanced', 'Advanced (5+ years)'), ('expert', 'Expert (Professional/Botanist)')], help_text='Your gardening/plant care experience level', max_length=20)),
                ('profile_visibility', models.CharField(choices=[('public', 'Public - Anyone can see my profile'), ('friends', 'Friends Only - Only people I follow can see my profile'), ('private', 'Private - Only I can see my profile')], default='public', help_text='Control who can see your profile', max_length=10)),
                ('show_email', models.BooleanField(default=False, help_text='Show email address on your public profile')),
                ('show_location', models.BooleanField(default=True, help_text='Show location on your public profile')),
                ('email_notifications', models.BooleanField(default=True, help_text='Receive email notifications for activity')),
                ('plant_id_notifications', models.BooleanField(default=True, help_text='Get notified when someone identifies your plant photos')),
                ('forum_notifications', models.BooleanField(default=True, help_text='Get notified about forum replies and mentions')),
                ('plants_identified', models.PositiveIntegerField(default=0, help_text='Number of plants identified by this user')),
                ('identifications_helped', models.PositiveIntegerField(default=0, help_text='Number of times this user helped identify plants for others')),
                ('forum_posts_count', models.PositiveIntegerField(default=0, help_text='Number of forum posts made by this user')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('favorite_plant_types', taggit.managers.TaggableManager(blank=True, help_text='Tag your favorite types of plants (e.g., succulents, ferns, flowers)', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('following', models.ManyToManyField(blank=True, help_text='Users you are following', related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(help_text='Message subject', max_length=200)),
                ('message', models.TextField(help_text='Message content')),
                ('is_read', models.BooleanField(default=False, help_text='Has the recipient read this message?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('parent_message', models.ForeignKey(blank=True, help_text='Parent message if this is a reply', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='users.usermessage')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('plant_identified', 'Plant Identified'), ('plant_added', 'Plant Added to Collection'), ('user_followed', 'User Followed'), ('forum_post', 'Forum Post Created'), ('forum_reply', 'Forum Reply Created'), ('profile_updated', 'Profile Updated')], max_length=20)),
                ('description', models.CharField(help_text='Human-readable description of the activity', max_length=255)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=True, help_text='Should this activity be visible to other users?')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['-created_at'], name='users_activ_created_9d13aa_idx'), models.Index(fields=['user', '-created_at'], name='users_activ_user_id_e43008_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserPlantCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of your plant collection (e.g., 'Indoor Plants', 'Garden')", max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of this plant collection')),
                ('is_public', models.BooleanField(default=True, help_text='Make this collection visible to other users')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plant_collections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'name')},
            },
        ),
    ]
