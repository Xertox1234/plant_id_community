# Generated by Django 5.2.5 on 2025-08-23 02:12

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('plant_identification', '0011_batchidentificationrequest_batchidentificationimage_and_more'),
        ('users', '0003_add_trust_level_system'),
    ]

    operations = [
        migrations.AddField(
            model_name='user',
            name='care_reminder_email',
            field=models.BooleanField(default=False, help_text='Receive email notifications for plant care reminders'),
        ),
        migrations.AddField(
            model_name='user',
            name='care_reminder_notifications',
            field=models.BooleanField(default=True, help_text='Receive push notifications for plant care reminders'),
        ),
        migrations.CreateModel(
            name='CareReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for secure references', unique=True)),
                ('reminder_type', models.CharField(choices=[('watering', 'Watering'), ('fertilizing', 'Fertilizing'), ('repotting', 'Repotting'), ('pruning', 'Pruning'), ('inspection', 'General Inspection'), ('custom', 'Custom Care Task')], help_text='Type of care reminder', max_length=20)),
                ('title', models.CharField(help_text="Reminder title (e.g., 'Water your Fiddle Leaf Fig')", max_length=200)),
                ('description', models.TextField(blank=True, help_text='Optional detailed description or instructions')),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('biweekly', 'Every 2 weeks'), ('monthly', 'Monthly'), ('quarterly', 'Every 3 months'), ('biannual', 'Every 6 months'), ('annual', 'Yearly'), ('custom', 'Custom interval')], default='weekly', help_text='How often this reminder should trigger', max_length=20)),
                ('custom_interval_days', models.PositiveIntegerField(blank=True, help_text='Custom interval in days (for custom frequency)', null=True)),
                ('next_reminder_date', models.DateTimeField(help_text='When this reminder should next trigger')),
                ('last_reminder_sent', models.DateTimeField(blank=True, help_text='When the last reminder was sent', null=True)),
                ('total_sent', models.PositiveIntegerField(default=0, help_text='Total number of reminders sent')),
                ('total_completed', models.PositiveIntegerField(default=0, help_text='Number of times user marked as completed')),
                ('total_snoozed', models.PositiveIntegerField(default=0, help_text='Number of times user snoozed this reminder')),
                ('current_streak', models.PositiveIntegerField(default=0, help_text='Current streak of completed reminders')),
                ('longest_streak', models.PositiveIntegerField(default=0, help_text='Longest streak of completed reminders')),
                ('is_active', models.BooleanField(default=True, help_text='Is this reminder currently active?')),
                ('send_push_notification', models.BooleanField(default=True, help_text='Send push notifications for this reminder')),
                ('send_email_notification', models.BooleanField(default=False, help_text='Send email notifications for this reminder')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('saved_care_instructions', models.ForeignKey(help_text='Care instructions this reminder is based on', on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='plant_identification.savedcareinstructions')),
                ('user', models.ForeignKey(help_text='User who owns this reminder', on_delete=django.db.models.deletion.CASCADE, related_name='care_reminders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['next_reminder_date'],
            },
        ),
        migrations.CreateModel(
            name='CareReminderLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('sent', 'Reminder Sent'), ('completed', 'Marked as Completed'), ('snoozed', 'Snoozed'), ('skipped', 'Skipped'), ('dismissed', 'Dismissed')], help_text='Action taken on the reminder', max_length=20)),
                ('action_data', models.JSONField(blank=True, default=dict, help_text='Additional data about the action (e.g., snooze duration)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reminder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='action_logs', to='users.carereminder')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DemoData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for secure references', unique=True)),
                ('demo_type', models.CharField(choices=[('plant_species', 'Sample Plant Species'), ('identification_request', 'Sample Identification Request'), ('care_instructions', 'Sample Care Instructions'), ('forum_topic', 'Sample Forum Topic'), ('forum_post', 'Sample Forum Post'), ('user_plant', 'Sample User Plant Collection'), ('care_reminder', 'Sample Care Reminder')], help_text='Type of demo data this represents', max_length=30)),
                ('title', models.CharField(help_text='Title/name for this demo data item', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of this demo data')),
                ('data_content', models.JSONField(help_text='The actual demo data content as JSON')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order in which to display this demo data')),
                ('is_featured', models.BooleanField(default=False, help_text='Is this featured demo data?')),
                ('is_active', models.BooleanField(default=True, help_text='Is this demo data currently active?')),
                ('target_onboarding_step', models.CharField(blank=True, choices=[('account_created', 'Account Created'), ('profile_completed', 'Profile Completed'), ('first_plant_identified', 'First Plant Identified'), ('care_card_saved', 'Care Card Saved'), ('forum_category_followed', 'Forum Category Followed'), ('first_forum_post', 'First Forum Post Created'), ('push_notifications_enabled', 'Push Notifications Enabled'), ('care_reminder_set', 'Care Reminder Set'), ('onboarding_completed', 'Onboarding Completed')], help_text='Which onboarding step this demo data is relevant for', max_length=30)),
                ('target_user_types', models.JSONField(default=list, help_text='Types of users this demo data is most relevant for')),
                ('image_url', models.URLField(blank=True, help_text='Optional image URL for this demo data')),
                ('icon_class', models.CharField(blank=True, help_text='CSS icon class for this demo data', max_length=50)),
                ('view_count', models.PositiveIntegerField(default=0, help_text='Number of times this demo data has been viewed')),
                ('interaction_count', models.PositiveIntegerField(default=0, help_text='Number of times users have interacted with this demo data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this demo data', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_demo_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['demo_type', 'display_order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='OnboardingProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for secure references', unique=True)),
                ('current_step', models.CharField(choices=[('account_created', 'Account Created'), ('profile_completed', 'Profile Completed'), ('first_plant_identified', 'First Plant Identified'), ('care_card_saved', 'Care Card Saved'), ('forum_category_followed', 'Forum Category Followed'), ('first_forum_post', 'First Forum Post Created'), ('push_notifications_enabled', 'Push Notifications Enabled'), ('care_reminder_set', 'Care Reminder Set'), ('onboarding_completed', 'Onboarding Completed')], default='account_created', help_text='Current step in the onboarding process', max_length=30)),
                ('completed_steps', models.JSONField(default=list, help_text='List of completed onboarding steps')),
                ('is_onboarding_active', models.BooleanField(default=True, help_text='Is the user currently in the onboarding flow?')),
                ('is_onboarding_completed', models.BooleanField(default=False, help_text='Has the user completed the full onboarding?')),
                ('onboarding_version', models.CharField(default='1.0', help_text='Version of the onboarding flow the user went through', max_length=10)),
                ('demo_mode_enabled', models.BooleanField(default=False, help_text='Is demo mode currently enabled for this user?')),
                ('demo_data_shown', models.JSONField(default=dict, help_text='Track which demo data has been shown to the user')),
                ('skip_demo_mode', models.BooleanField(default=False, help_text='User chose to skip demo mode')),
                ('preferred_plant_types', models.JSONField(default=list, help_text='Plant types the user showed interest in during onboarding')),
                ('interested_features', models.JSONField(default=list, help_text='Features the user expressed interest in')),
                ('onboarding_entry_point', models.CharField(blank=True, help_text='How the user discovered the platform (organic, referral, etc.)', max_length=50)),
                ('total_onboarding_time_seconds', models.PositiveIntegerField(blank=True, help_text='Total time spent in onboarding flow', null=True)),
                ('steps_completion_times', models.JSONField(default=dict, help_text='Time taken to complete each onboarding step')),
                ('onboarding_started_at', models.DateTimeField(auto_now_add=True)),
                ('last_step_completed_at', models.DateTimeField(blank=True, help_text='When the user last completed an onboarding step', null=True)),
                ('onboarding_completed_at', models.DateTimeField(blank=True, help_text='When the user completed the full onboarding', null=True)),
                ('user', models.OneToOneField(help_text='User whose onboarding progress this tracks', on_delete=django.db.models.deletion.CASCADE, related_name='onboarding_progress', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OnboardingAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('step_started', 'Onboarding Step Started'), ('step_completed', 'Onboarding Step Completed'), ('step_skipped', 'Onboarding Step Skipped'), ('demo_viewed', 'Demo Data Viewed'), ('demo_interacted', 'Demo Data Interacted With'), ('help_requested', 'Help Requested'), ('onboarding_abandoned', 'Onboarding Abandoned'), ('onboarding_completed', 'Onboarding Completed')], help_text='Type of action that occurred', max_length=30)),
                ('step_name', models.CharField(blank=True, help_text='Onboarding step related to this action', max_length=30)),
                ('event_data', models.JSONField(default=dict, help_text='Additional data about the event')),
                ('page_url', models.URLField(blank=True, help_text='URL where the action occurred')),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user', null=True)),
                ('time_spent_seconds', models.PositiveIntegerField(blank=True, help_text='Time spent on this action/step', null=True)),
                ('session_duration_seconds', models.PositiveIntegerField(blank=True, help_text='Total session duration when this action occurred', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='onboarding_analytics', to=settings.AUTH_USER_MODEL)),
                ('onboarding_progress', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics_events', to='users.onboardingprogress')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PushSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.URLField(help_text='Push service endpoint URL', max_length=500)),
                ('p256dh_key', models.CharField(help_text='P256DH public key for encryption', max_length=255)),
                ('auth_key', models.CharField(help_text='Auth secret for encryption', max_length=255)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string for device identification')),
                ('device_name', models.CharField(blank=True, help_text="Human-readable device name (e.g., 'Chrome on Android')", max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Is this subscription currently active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_used', models.DateTimeField(blank=True, help_text='Last time this subscription was used to send a notification', null=True)),
                ('user', models.ForeignKey(help_text='User who owns this push subscription', on_delete=django.db.models.deletion.CASCADE, related_name='push_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='carereminder',
            index=models.Index(fields=['user', 'is_active'], name='users_carer_user_id_277b2f_idx'),
        ),
        migrations.AddIndex(
            model_name='carereminder',
            index=models.Index(fields=['next_reminder_date', 'is_active'], name='users_carer_next_re_2b563a_idx'),
        ),
        migrations.AddIndex(
            model_name='carereminder',
            index=models.Index(fields=['reminder_type'], name='users_carer_reminde_64b263_idx'),
        ),
        migrations.AddIndex(
            model_name='carereminderlog',
            index=models.Index(fields=['reminder', '-created_at'], name='users_carer_reminde_09dc02_idx'),
        ),
        migrations.AddIndex(
            model_name='carereminderlog',
            index=models.Index(fields=['action', '-created_at'], name='users_carer_action_50409b_idx'),
        ),
        migrations.AddIndex(
            model_name='demodata',
            index=models.Index(fields=['demo_type', 'is_active'], name='users_demod_demo_ty_12e2e0_idx'),
        ),
        migrations.AddIndex(
            model_name='demodata',
            index=models.Index(fields=['target_onboarding_step'], name='users_demod_target__89992b_idx'),
        ),
        migrations.AddIndex(
            model_name='demodata',
            index=models.Index(fields=['is_featured', 'is_active'], name='users_demod_is_feat_98f624_idx'),
        ),
        migrations.AddIndex(
            model_name='onboardingprogress',
            index=models.Index(fields=['is_onboarding_active'], name='users_onboa_is_onbo_e45d9c_idx'),
        ),
        migrations.AddIndex(
            model_name='onboardingprogress',
            index=models.Index(fields=['current_step'], name='users_onboa_current_97ae90_idx'),
        ),
        migrations.AddIndex(
            model_name='onboardingprogress',
            index=models.Index(fields=['onboarding_completed_at'], name='users_onboa_onboard_f88c3f_idx'),
        ),
        migrations.AddIndex(
            model_name='onboardinganalytics',
            index=models.Index(fields=['user', '-created_at'], name='users_onboa_user_id_8c6f57_idx'),
        ),
        migrations.AddIndex(
            model_name='onboardinganalytics',
            index=models.Index(fields=['action_type', '-created_at'], name='users_onboa_action__80137c_idx'),
        ),
        migrations.AddIndex(
            model_name='onboardinganalytics',
            index=models.Index(fields=['onboarding_progress', '-created_at'], name='users_onboa_onboard_6e5afe_idx'),
        ),
        migrations.AddIndex(
            model_name='pushsubscription',
            index=models.Index(fields=['user', 'is_active'], name='users_pushs_user_id_5271ce_idx'),
        ),
        migrations.AddIndex(
            model_name='pushsubscription',
            index=models.Index(fields=['endpoint'], name='users_pushs_endpoin_e92940_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='pushsubscription',
            unique_together={('user', 'endpoint')},
        ),
    ]
