# Generated by Django 5.2.4 on 2025-08-19 19:22

from django.db import migrations
from django.core.management import call_command


def migrate_care_guides_to_blog(apps, schema_editor):
    """Data migration to convert PlantCareGuide entries to blog posts."""
    try:
        # Call the management command to perform the migration
        call_command('migrate_care_guides_to_blog', verbosity=1, interactive=False)
    except Exception as e:
        # If PlantCareGuide doesn't exist yet (fresh installation), skip migration
        print(f"Skipping care guide migration (likely fresh installation): {e}")


def reverse_migrate_care_guides_to_blog(apps, schema_editor):
    """Reverse migration - remove migrated blog posts."""
    BlogCategory = apps.get_model('blog', 'BlogCategory')
    BlogPostPage = apps.get_model('blog', 'BlogPostPage')
    
    try:
        # Find and remove the Plant Care category and its posts
        plant_care_category = BlogCategory.objects.filter(slug='plant-care').first()
        if plant_care_category:
            # Remove all blog posts in this category
            posts_in_category = BlogPostPage.objects.filter(categories=plant_care_category)
            print(f"Removing {posts_in_category.count()} plant care blog posts")
            posts_in_category.delete()
            
            # Remove the category
            plant_care_category.delete()
            print("Removed Plant Care category")
    except Exception as e:
        print(f"Error during reverse migration: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0003_alter_blogpostpage_content_blocks'),
        ('plant_identification', '0005_alter_plantspeciespage_plant_species'),
    ]

    operations = [
        migrations.RunPython(
            migrate_care_guides_to_blog,
            reverse_migrate_care_guides_to_blog,
        ),
    ]
