# Generated by Django 5.2.4 on 2025-08-06 18:52

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('plant_identification', '0001_initial'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('wagtailcore', '0094_alter_page_locale'),
        ('wagtailimages', '0027_image_description'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name', max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description')),
                ('icon', models.CharField(blank=True, help_text="CSS icon class (e.g., 'fas fa-leaf')", max_length=50)),
                ('color', models.CharField(default='#28a745', help_text='Category color (hex code)', max_length=7)),
                ('is_featured', models.BooleanField(default=False, help_text='Show this category prominently')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Blog Category',
                'verbose_name_plural': 'Blog Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BlogAuthorExpertise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlogAuthorPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('meta_description', models.TextField(blank=True, help_text='Meta description for search engines', max_length=160)),
                ('bio', wagtail.fields.RichTextField(help_text='Author bio and background information')),
                ('social_links', wagtail.fields.StreamField([('website', 0), ('twitter', 0), ('instagram', 0), ('youtube', 0)], blank=True, block_lookup={0: ('wagtail.blocks.URLBlock', (), {'icon': 'link'})}, help_text='Social media links')),
                ('posts_per_page', models.IntegerField(default=12, help_text='Number of posts to display per page')),
                ('author', models.OneToOneField(help_text='The user this author page represents', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('expertise_areas', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='Areas of plant expertise', through='blog.BlogAuthorExpertise', to='taggit.Tag', verbose_name='Tags')),
                ('social_image', models.ForeignKey(blank=True, help_text='Image for social media sharing', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Blog Author Page',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AddField(
            model_name='blogauthorexpertise',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='expertise_items', to='blog.blogauthorpage'),
        ),
        migrations.CreateModel(
            name='BlogCategoryPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('meta_description', models.TextField(blank=True, help_text='Meta description for search engines', max_length=160)),
                ('posts_per_page', models.IntegerField(default=12, help_text='Number of posts to display per page')),
                ('category', models.ForeignKey(help_text='The category this page represents', on_delete=django.db.models.deletion.PROTECT, to='blog.blogcategory')),
                ('social_image', models.ForeignKey(blank=True, help_text='Image for social media sharing', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Blog Category Page',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('meta_description', models.TextField(blank=True, help_text='Meta description for search engines', max_length=160)),
                ('introduction', wagtail.fields.RichTextField(blank=True, help_text='Introduction text for the blog')),
                ('posts_per_page', models.IntegerField(default=12, help_text='Number of posts to display per page')),
                ('show_featured_posts', models.BooleanField(default=True, help_text='Show featured posts section')),
                ('show_categories', models.BooleanField(default=True, help_text='Show categories section')),
                ('featured_posts_title', models.CharField(default='Featured Posts', help_text='Title for featured posts section', max_length=100)),
                ('social_image', models.ForeignKey(blank=True, help_text='Image for social media sharing', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Blog Index Page',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogNewsletter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Subscriber email address', max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, help_text='Subscriber first name', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Is subscription active?')),
                ('frequency', models.CharField(choices=[('weekly', 'Weekly Digest'), ('monthly', 'Monthly Digest'), ('instant', 'Instant Notifications')], default='weekly', help_text='Newsletter frequency preference', max_length=20)),
                ('plant_types_interest', models.TextField(blank=True, help_text='Plant types of interest (comma-separated)')),
                ('experience_level', models.CharField(blank=True, choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], help_text='Gardening experience level', max_length=20)),
                ('source', models.CharField(blank=True, help_text='How did they find us?', max_length=100)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address when subscribed', null=True)),
                ('subscribed_at', models.DateTimeField(auto_now_add=True)),
                ('last_sent_at', models.DateTimeField(blank=True, null=True)),
                ('unsubscribed_at', models.DateTimeField(blank=True, null=True)),
                ('categories', models.ManyToManyField(blank=True, help_text='Categories of interest', to='blog.blogcategory')),
            ],
            options={
                'verbose_name': 'Newsletter Subscription',
                'verbose_name_plural': 'Newsletter Subscriptions',
                'ordering': ['-subscribed_at'],
            },
        ),
        migrations.CreateModel(
            name='BlogPostPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('meta_description', models.TextField(blank=True, help_text='Meta description for search engines', max_length=160)),
                ('publish_date', models.DateField(help_text='Date to publish this post')),
                ('introduction', wagtail.fields.RichTextField(help_text='Brief introduction or excerpt')),
                ('content_blocks', wagtail.fields.StreamField([('heading', 0), ('paragraph', 1), ('image', 2), ('quote', 5), ('code', 8), ('plant_spotlight', 13), ('care_instructions', 15), ('gallery', 18), ('call_to_action', 21), ('video_embed', 23)], block_lookup={0: ('wagtail.blocks.CharBlock', (), {'help_text': 'Add a heading to structure your content', 'icon': 'title', 'template': 'blog/blocks/heading.html'}), 1: ('wagtail.blocks.RichTextBlock', (), {'help_text': 'Add paragraph text with AI assistance for plant content', 'icon': 'pilcrow', 'template': 'blog/blocks/paragraph.html'}), 2: ('wagtail.images.blocks.ImageChooserBlock', (), {'help_text': 'Add images with AI-generated alt text', 'icon': 'image', 'template': 'blog/blocks/image.html'}), 3: ('wagtail.blocks.RichTextBlock', (), {}), 4: ('wagtail.blocks.CharBlock', (), {'help_text': 'Who said this quote?', 'required': False}), 5: ('wagtail.blocks.StructBlock', [[('quote_text', 3), ('attribution', 4)]], {'icon': 'openquote', 'template': 'blog/blocks/quote.html'}), 6: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('python', 'Python'), ('javascript', 'JavaScript'), ('html', 'HTML'), ('css', 'CSS'), ('bash', 'Bash'), ('json', 'JSON')], 'required': False}), 7: ('wagtail.blocks.TextBlock', (), {}), 8: ('wagtail.blocks.StructBlock', [[('language', 6), ('code', 7)]], {'icon': 'code', 'template': 'blog/blocks/code.html'}), 9: ('wagtail.blocks.CharBlock', (), {}), 10: ('wagtail.blocks.CharBlock', (), {'required': False}), 11: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('easy', 'Easy'), ('moderate', 'Moderate'), ('difficult', 'Difficult')]}), 12: ('wagtail.images.blocks.ImageChooserBlock', (), {'required': False}), 13: ('wagtail.blocks.StructBlock', [[('plant_name', 9), ('scientific_name', 10), ('description', 3), ('care_difficulty', 11), ('image', 12)]], {'icon': 'snippet', 'template': 'blog/blocks/plant_spotlight.html'}), 14: ('wagtail.blocks.RichTextBlock', (), {'required': False}), 15: ('wagtail.blocks.StructBlock', [[('care_title', 9), ('watering', 3), ('lighting', 3), ('temperature', 10), ('humidity', 10), ('fertilizing', 14), ('special_notes', 14)]], {'icon': 'help', 'template': 'blog/blocks/care_instructions.html'}), 16: ('wagtail.images.blocks.ImageChooserBlock', (), {}), 17: ('wagtail.blocks.ListBlock', (16,), {'max_num': 12, 'min_num': 2}), 18: ('wagtail.blocks.StructBlock', [[('gallery_title', 10), ('images', 17)]], {'icon': 'image', 'template': 'blog/blocks/gallery.html'}), 19: ('wagtail.blocks.URLBlock', (), {}), 20: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('primary', 'Primary'), ('secondary', 'Secondary'), ('outline', 'Outline')]}), 21: ('wagtail.blocks.StructBlock', [[('cta_title', 9), ('cta_description', 14), ('button_text', 9), ('button_url', 19), ('button_style', 20)]], {'icon': 'link', 'template': 'blog/blocks/call_to_action.html'}), 22: ('wagtail.blocks.URLBlock', (), {'help_text': 'YouTube or Vimeo URL'}), 23: ('wagtail.blocks.StructBlock', [[('video_title', 10), ('video_url', 22), ('description', 14)]], {'icon': 'media', 'template': 'blog/blocks/video_embed.html'})}, help_text='Main content blocks with AI assistance for plant-related content')),
                ('series_order', models.PositiveIntegerField(blank=True, help_text='Order within the series', null=True)),
                ('is_featured', models.BooleanField(default=False, help_text='Feature this post on the blog index')),
                ('reading_time', models.PositiveIntegerField(blank=True, help_text='Estimated reading time in minutes (auto-calculated)', null=True)),
                ('difficulty_level', models.CharField(blank=True, choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], help_text='Difficulty level for plant care content', max_length=20)),
                ('allow_comments', models.BooleanField(default=True, help_text='Allow comments on this post')),
                ('author', models.ForeignKey(help_text='Post author', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('categories', modelcluster.fields.ParentalManyToManyField(blank=True, help_text='Categories for this post', to='blog.blogcategory')),
                ('featured_image', models.ForeignKey(blank=True, help_text='Main image for this post', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('related_plant_species', models.ManyToManyField(blank=True, help_text='Plant species mentioned in this post', to='plant_identification.plantspecies')),
                ('social_image', models.ForeignKey(blank=True, help_text='Image for social media sharing', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Blog Post',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPostTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='blog.blogpostpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogpostpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='Tags for this post', through='blog.BlogPostTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='BlogSeries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Series title', max_length=200)),
                ('slug', models.SlugField(help_text='URL-friendly name', max_length=200, unique=True)),
                ('description', models.TextField(help_text='Series description')),
                ('is_completed', models.BooleanField(default=False, help_text='Mark series as completed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('image', models.ForeignKey(blank=True, help_text='Series cover image', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Blog Series',
                'verbose_name_plural': 'Blog Series',
                'ordering': ['title'],
            },
        ),
        migrations.AddField(
            model_name='blogpostpage',
            name='series',
            field=models.ForeignKey(blank=True, help_text='Part of a blog series?', null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.blogseries'),
        ),
        migrations.CreateModel(
            name='BlogComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Comment content')),
                ('is_approved', models.BooleanField(default=True, help_text='Is this comment approved for display?')),
                ('is_flagged', models.BooleanField(default=False, help_text='Has this comment been flagged by users?')),
                ('flag_count', models.PositiveIntegerField(default=0, help_text='Number of times this comment has been flagged')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(help_text='Comment author', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent comment if this is a reply', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='blog.blogcomment')),
                ('post', models.ForeignKey(help_text='Blog post this comment is on', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='blog.blogpostpage')),
            ],
            options={
                'ordering': ['created_at'],
                'indexes': [models.Index(fields=['post', 'created_at'], name='blog_blogco_post_id_9d37d4_idx'), models.Index(fields=['author', 'created_at'], name='blog_blogco_author__1614fe_idx'), models.Index(fields=['is_approved', 'created_at'], name='blog_blogco_is_appr_7e1f6f_idx')],
            },
        ),
    ]
