# Generated by Django 5.2.4 on 2025-08-05 21:41

import django.db.models.deletion
import imagekit.models.fields
import taggit.managers
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('users', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PlantIdentificationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this identification request', unique=True)),
                ('image_1', imagekit.models.fields.ProcessedImageField(help_text='Primary image of the plant', upload_to='plants/identifications/')),
                ('image_2', imagekit.models.fields.ProcessedImageField(blank=True, help_text='Optional second image', null=True, upload_to='plants/identifications/')),
                ('image_3', imagekit.models.fields.ProcessedImageField(blank=True, help_text='Optional third image', null=True, upload_to='plants/identifications/')),
                ('location', models.CharField(blank=True, help_text='Where was this plant found?', max_length=200)),
                ('latitude', models.FloatField(blank=True, help_text='GPS latitude', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='GPS longitude', null=True)),
                ('description', models.TextField(blank=True, help_text="User's description of the plant")),
                ('plant_size', models.CharField(blank=True, choices=[('small', 'Small (< 30cm)'), ('medium', 'Medium (30cm - 1m)'), ('large', 'Large (1m - 3m)'), ('very_large', 'Very Large (> 3m)')], help_text='Approximate size of the plant', max_length=50)),
                ('habitat', models.CharField(blank=True, help_text='Where was the plant growing? (e.g., garden, forest, field)', max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending Identification'), ('processing', 'Processing with AI'), ('identified', 'Identified'), ('needs_help', 'Needs Community Help'), ('failed', 'Identification Failed')], default='pending', max_length=20)),
                ('processed_by_ai', models.BooleanField(default=False, help_text='Has this been processed by AI identification?')),
                ('ai_processing_date', models.DateTimeField(blank=True, help_text='When was this processed by AI?', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to_collection', models.ForeignKey(blank=True, help_text="User's collection this plant was added to", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='identification_requests', to='users.userplantcollection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plant_identification_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlantSpecies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scientific_name', models.CharField(help_text='Scientific binomial name (e.g., Rosa damascena)', max_length=200, unique=True)),
                ('common_names', models.TextField(blank=True, help_text='Common names separated by commas')),
                ('family', models.CharField(blank=True, help_text='Plant family name', max_length=100)),
                ('genus', models.CharField(blank=True, help_text='Plant genus', max_length=100)),
                ('species', models.CharField(blank=True, help_text='Species name', max_length=100)),
                ('trefle_id', models.CharField(blank=True, help_text='Trefle API plant ID', max_length=50, null=True)),
                ('plantnet_id', models.CharField(blank=True, help_text='PlantNet API plant ID', max_length=50, null=True)),
                ('plant_type', models.CharField(blank=True, choices=[('tree', 'Tree'), ('shrub', 'Shrub'), ('herb', 'Herb'), ('grass', 'Grass'), ('fern', 'Fern'), ('moss', 'Moss'), ('succulent', 'Succulent'), ('vine', 'Vine'), ('annual', 'Annual'), ('perennial', 'Perennial'), ('biennial', 'Biennial')], max_length=50)),
                ('growth_habit', models.CharField(blank=True, help_text='How the plant grows (e.g., climbing, spreading, upright)', max_length=100)),
                ('mature_height_min', models.FloatField(blank=True, help_text='Minimum mature height in meters', null=True)),
                ('mature_height_max', models.FloatField(blank=True, help_text='Maximum mature height in meters', null=True)),
                ('light_requirements', models.CharField(blank=True, choices=[('full_sun', 'Full Sun'), ('partial_sun', 'Partial Sun'), ('partial_shade', 'Partial Shade'), ('full_shade', 'Full Shade')], max_length=20)),
                ('water_requirements', models.CharField(blank=True, choices=[('low', 'Low'), ('moderate', 'Moderate'), ('high', 'High')], max_length=20)),
                ('soil_ph_min', models.FloatField(blank=True, help_text='Minimum soil pH tolerance', null=True)),
                ('soil_ph_max', models.FloatField(blank=True, help_text='Maximum soil pH tolerance', null=True)),
                ('hardiness_zone_min', models.IntegerField(blank=True, help_text='Minimum USDA hardiness zone', null=True)),
                ('hardiness_zone_max', models.IntegerField(blank=True, help_text='Maximum USDA hardiness zone', null=True)),
                ('description', models.TextField(blank=True, help_text='General description of the plant')),
                ('native_regions', models.TextField(blank=True, help_text='Native regions and countries')),
                ('bloom_time', models.CharField(blank=True, help_text='When the plant typically blooms', max_length=100)),
                ('flower_color', models.CharField(blank=True, help_text='Typical flower colors', max_length=100)),
                ('primary_image', models.ImageField(blank=True, help_text='Primary image of the plant', null=True, upload_to='plants/species/')),
                ('is_verified', models.BooleanField(default=False, help_text='Has this species been verified by an expert?')),
                ('verification_source', models.CharField(blank=True, help_text='Source of verification (e.g., botanist name, institution)', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='Tags for categorizing plants (e.g., medicinal, edible, toxic)', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Plant Species',
                'verbose_name_plural': 'Plant Species',
                'ordering': ['scientific_name'],
            },
        ),
        migrations.CreateModel(
            name='PlantIdentificationResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suggested_scientific_name', models.CharField(blank=True, help_text='Suggested scientific name if not in our database', max_length=200)),
                ('suggested_common_name', models.CharField(blank=True, help_text='Suggested common name', max_length=200)),
                ('confidence_score', models.FloatField(help_text='Confidence score (0.0 to 1.0)')),
                ('identification_source', models.CharField(choices=[('ai_trefle', 'AI - Trefle API'), ('ai_plantnet', 'AI - PlantNet API'), ('ai_combined', 'AI - Combined APIs'), ('community', 'Community Identification'), ('expert', 'Expert Identification'), ('user_manual', 'Manual User Entry')], max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this identification')),
                ('api_response_data', models.JSONField(blank=True, help_text='Raw API response data for debugging', null=True)),
                ('upvotes', models.PositiveIntegerField(default=0, help_text='Number of users who agree with this identification')),
                ('downvotes', models.PositiveIntegerField(default=0, help_text='Number of users who disagree with this identification')),
                ('is_accepted', models.BooleanField(default=False, help_text='Has the requesting user accepted this identification?')),
                ('is_primary', models.BooleanField(default=False, help_text='Is this the primary/best identification for this request?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('identified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='plant_identifications_given', to=settings.AUTH_USER_MODEL)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='identification_results', to='plant_identification.plantidentificationrequest')),
                ('identified_species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='identification_results', to='plant_identification.plantspecies')),
            ],
            options={
                'ordering': ['-confidence_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPlant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(blank=True, help_text='Personal name for this plant', max_length=100)),
                ('acquisition_date', models.DateField(blank=True, help_text='When did you get this plant?', null=True)),
                ('location_in_home', models.CharField(blank=True, help_text='Where is this plant located? (e.g., living room window)', max_length=100)),
                ('notes', models.TextField(blank=True, help_text='Personal notes about this plant')),
                ('is_alive', models.BooleanField(default=True, help_text='Is this plant still alive?')),
                ('is_public', models.BooleanField(default=True, help_text='Show this plant in your public collection?')),
                ('image', models.ImageField(blank=True, help_text='Current photo of your plant', null=True, upload_to='plants/collections/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plants', to='users.userplantcollection')),
                ('from_identification_request', models.ForeignKey(blank=True, help_text='Original identification request that led to this plant', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collection_plants', to='plant_identification.plantidentificationrequest')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_plants', to='plant_identification.plantspecies')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plants', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='plantidentificationrequest',
            index=models.Index(fields=['-created_at'], name='plant_ident_created_539451_idx'),
        ),
        migrations.AddIndex(
            model_name='plantidentificationrequest',
            index=models.Index(fields=['user', '-created_at'], name='plant_ident_user_id_305bb3_idx'),
        ),
        migrations.AddIndex(
            model_name='plantidentificationrequest',
            index=models.Index(fields=['status'], name='plant_ident_status_8d482a_idx'),
        ),
        migrations.AddIndex(
            model_name='plantidentificationresult',
            index=models.Index(fields=['request', '-confidence_score'], name='plant_ident_request_fa9918_idx'),
        ),
        migrations.AddIndex(
            model_name='plantidentificationresult',
            index=models.Index(fields=['identified_species'], name='plant_ident_identif_903f8c_idx'),
        ),
        migrations.AddIndex(
            model_name='plantidentificationresult',
            index=models.Index(fields=['-created_at'], name='plant_ident_created_d45176_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userplant',
            unique_together={('user', 'collection', 'species', 'nickname')},
        ),
    ]
