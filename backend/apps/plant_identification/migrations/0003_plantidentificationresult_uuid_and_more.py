# Generated by Django 5.2.4 on 2025-08-11 15:58

import apps.core.validators
import django.db.models.deletion
import imagekit.models.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('plant_identification', '0002_alter_plantidentificationrequest_image_1_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='plantidentificationresult',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for secure references', unique=True),
        ),
        migrations.AddField(
            model_name='plantspecies',
            name='api_source',
            field=models.CharField(choices=[('manual', 'Manual Entry'), ('plantnet', 'PlantNet API'), ('trefle', 'Trefle API'), ('combined', 'Combined APIs'), ('community', 'Community Contributed')], default='manual', help_text='Primary source where this species data came from', max_length=50),
        ),
        migrations.AddField(
            model_name='plantspecies',
            name='auto_stored',
            field=models.BooleanField(default=False, help_text='Was this species auto-stored from a high-confidence identification (≥50%)?'),
        ),
        migrations.AddField(
            model_name='plantspecies',
            name='community_confirmed',
            field=models.BooleanField(default=False, help_text='Has this species been confirmed by community voting?'),
        ),
        migrations.AddField(
            model_name='plantspecies',
            name='confidence_score',
            field=models.FloatField(blank=True, help_text='Highest confidence score from identifications that created this species', null=True),
        ),
        migrations.AddField(
            model_name='plantspecies',
            name='expert_reviewed',
            field=models.BooleanField(default=False, help_text='Has this species been reviewed by a plant expert?'),
        ),
        migrations.AddField(
            model_name='plantspecies',
            name='identification_count',
            field=models.PositiveIntegerField(default=0, help_text='Number of times this species has been identified'),
        ),
        migrations.AddField(
            model_name='plantspecies',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for secure references', unique=True),
        ),
        migrations.AddField(
            model_name='userplant',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for secure references', unique=True),
        ),
        migrations.CreateModel(
            name='PlantDiseaseDatabase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for secure references', unique=True)),
                ('disease_name', models.CharField(help_text='Common name of the disease', max_length=200, unique=True)),
                ('scientific_name', models.CharField(blank=True, help_text='Scientific name of the pathogen if available', max_length=200)),
                ('disease_type', models.CharField(choices=[('fungal', 'Fungal Disease'), ('bacterial', 'Bacterial Disease'), ('viral', 'Viral Disease'), ('pest', 'Pest/Insect Damage'), ('abiotic', 'Abiotic/Environmental'), ('deficiency', 'Nutrient Deficiency'), ('toxicity', 'Toxicity/Poisoning')], help_text='Type of disease or problem', max_length=20)),
                ('severity_levels', models.JSONField(default=list, help_text='Array of severity levels (mild, moderate, severe)')),
                ('symptoms', models.JSONField(default=dict, help_text='Structured symptom data from API responses')),
                ('affected_plant_families', models.JSONField(default=list, help_text='Plant families commonly affected by this disease')),
                ('seasonal_patterns', models.JSONField(default=dict, help_text='When this disease typically occurs (seasons, weather conditions)')),
                ('environmental_triggers', models.JSONField(default=list, help_text='Environmental conditions that trigger this disease')),
                ('confidence_score', models.FloatField(help_text='Minimum confidence score from diagnoses (≥0.5 required)')),
                ('api_source', models.CharField(choices=[('plant_health', 'plant.health API'), ('plantnet', 'PlantNet API'), ('manual', 'Manual Entry'), ('community', 'Community Contributed')], default='plant_health', help_text='Source of this disease information', max_length=50)),
                ('diagnosis_count', models.PositiveIntegerField(default=1, help_text='Number of times this disease has been diagnosed')),
                ('community_confirmed', models.BooleanField(default=False, help_text='Has this been confirmed by community voting?')),
                ('expert_reviewed', models.BooleanField(default=False, help_text='Has this been reviewed by a plant health expert?')),
                ('description', models.TextField(blank=True, help_text='General description of the disease')),
                ('prevention_tips', models.TextField(blank=True, help_text='How to prevent this disease')),
                ('reference_image', models.ImageField(blank=True, help_text='Reference image showing typical symptoms', null=True, upload_to='diseases/reference/')),
                ('first_diagnosed', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('affected_plants', models.ManyToManyField(blank=True, help_text='Specific plant species affected', related_name='known_diseases', to='plant_identification.plantspecies')),
            ],
            options={
                'verbose_name': 'Disease Database Entry',
                'verbose_name_plural': 'Disease Database Entries',
                'ordering': ['-diagnosis_count', 'disease_name'],
            },
        ),
        migrations.CreateModel(
            name='DiseaseCareInstructions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for secure references', unique=True)),
                ('treatment_name', models.CharField(help_text='Name of the treatment method', max_length=200)),
                ('treatment_type', models.CharField(choices=[('organic', 'Organic Treatment'), ('chemical', 'Chemical Treatment'), ('cultural', 'Cultural/Management'), ('biological', 'Biological Control'), ('preventive', 'Preventive Measure')], help_text='Type of treatment approach', max_length=20)),
                ('instructions', models.TextField(help_text='Detailed treatment instructions')),
                ('application_timing', models.TextField(blank=True, help_text='When and how often to apply this treatment')),
                ('materials_needed', models.JSONField(default=list, help_text='List of materials/products needed')),
                ('effectiveness_score', models.FloatField(default=0.0, help_text='Community-rated effectiveness (0.0 to 1.0)')),
                ('success_rate', models.FloatField(blank=True, help_text='Percentage success rate if known', null=True)),
                ('community_votes', models.PositiveIntegerField(default=0, help_text='Total community votes received')),
                ('positive_votes', models.PositiveIntegerField(default=0, help_text="Positive 'this worked for me' votes")),
                ('negative_votes', models.PositiveIntegerField(default=0, help_text="Negative 'this didn't work' votes")),
                ('cost_estimate', models.CharField(blank=True, choices=[('free', 'Free'), ('low', 'Low Cost ($1-10)'), ('medium', 'Medium Cost ($10-50)'), ('high', 'High Cost ($50+)')], help_text='Estimated cost of treatment', max_length=20)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy - Anyone can do'), ('moderate', 'Moderate - Some experience needed'), ('difficult', 'Difficult - Expert knowledge required')], default='easy', help_text='Difficulty level of applying treatment', max_length=20)),
                ('safety_notes', models.TextField(blank=True, help_text='Safety precautions and warnings')),
                ('source', models.CharField(choices=[('api', 'API Response'), ('community', 'Community Contributed'), ('expert', 'Expert Recommendation'), ('research', 'Research/Scientific')], default='api', help_text='Source of this treatment information', max_length=20)),
                ('verified_by_expert', models.BooleanField(default=False, help_text='Has this been verified by a plant health expert?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('disease', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='care_instructions', to='plant_identification.plantdiseasedatabase')),
            ],
            options={
                'ordering': ['-effectiveness_score', '-positive_votes', 'treatment_name'],
                'unique_together': {('disease', 'treatment_name')},
            },
        ),
        migrations.CreateModel(
            name='PlantDiseaseRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this disease diagnosis request', unique=True)),
                ('image_1', imagekit.models.fields.ProcessedImageField(help_text='Primary image showing disease symptoms', upload_to='plants/diseases/', validators=[apps.core.validators.validate_plant_identification_image])),
                ('image_2', imagekit.models.fields.ProcessedImageField(blank=True, help_text='Optional second symptom image', null=True, upload_to='plants/diseases/', validators=[apps.core.validators.validate_plant_identification_image])),
                ('image_3', imagekit.models.fields.ProcessedImageField(blank=True, help_text='Optional third symptom image', null=True, upload_to='plants/diseases/', validators=[apps.core.validators.validate_plant_identification_image])),
                ('symptoms_description', models.TextField(blank=True, help_text="User's description of symptoms observed")),
                ('plant_condition', models.CharField(blank=True, choices=[('excellent', 'Excellent - minor symptoms'), ('good', 'Good - some concerning symptoms'), ('fair', 'Fair - moderate damage visible'), ('poor', 'Poor - significant damage'), ('critical', 'Critical - plant may die')], help_text='Overall condition of the plant', max_length=20)),
                ('location', models.CharField(blank=True, help_text='Where is this plant located?', max_length=200)),
                ('recent_weather', models.CharField(blank=True, help_text='Recent weather conditions (rain, drought, temperature changes)', max_length=200)),
                ('recent_care_changes', models.TextField(blank=True, help_text='Any recent changes in watering, fertilizing, location, etc.')),
                ('status', models.CharField(choices=[('pending', 'Pending Diagnosis'), ('processing', 'Processing with AI'), ('diagnosed', 'Disease Diagnosed'), ('needs_help', 'Needs Community Help'), ('failed', 'Diagnosis Failed')], default='pending', max_length=20)),
                ('processed_by_ai', models.BooleanField(default=False, help_text='Has this been processed by AI diagnosis?')),
                ('ai_processing_date', models.DateTimeField(blank=True, help_text='When was this processed by AI?', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plant_identification_request', models.ForeignKey(blank=True, help_text='Original plant ID request this disease diagnosis is based on', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='disease_diagnosis_requests', to='plant_identification.plantidentificationrequest')),
                ('plant_species', models.ForeignKey(blank=True, help_text='Known plant species with disease symptoms', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='disease_requests', to='plant_identification.plantspecies')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plant_disease_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlantDiseaseResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for secure references', unique=True)),
                ('suggested_disease_name', models.CharField(blank=True, help_text='Disease name from API if not in our database', max_length=200)),
                ('suggested_disease_type', models.CharField(blank=True, choices=[('fungal', 'Fungal Disease'), ('bacterial', 'Bacterial Disease'), ('viral', 'Viral Disease'), ('pest', 'Pest/Insect Damage'), ('abiotic', 'Abiotic/Environmental'), ('deficiency', 'Nutrient Deficiency'), ('toxicity', 'Toxicity/Poisoning')], help_text='Type of disease suggested by API', max_length=20)),
                ('confidence_score', models.FloatField(help_text='Confidence score (0.0 to 1.0)')),
                ('diagnosis_source', models.CharField(choices=[('local_db', 'Local Database'), ('api_plant_health', 'plant.health API'), ('api_combined', 'Combined APIs'), ('community', 'Community Diagnosis'), ('expert', 'Expert Diagnosis')], max_length=20)),
                ('symptoms_identified', models.JSONField(default=list, help_text='List of symptoms identified in the images')),
                ('severity_assessment', models.CharField(blank=True, choices=[('mild', 'Mild - Early symptoms'), ('moderate', 'Moderate - Noticeable damage'), ('severe', 'Severe - Significant damage'), ('critical', 'Critical - Plant in danger')], help_text='Assessed severity of the disease', max_length=20)),
                ('recommended_treatments', models.JSONField(default=list, help_text='List of recommended treatment IDs or names')),
                ('immediate_actions', models.TextField(blank=True, help_text='Immediate actions the user should take')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this diagnosis')),
                ('api_response_data', models.JSONField(blank=True, help_text='Raw API response data for debugging', null=True)),
                ('community_confirmed', models.BooleanField(default=False, help_text='Has this diagnosis been confirmed by community votes?')),
                ('upvotes', models.PositiveIntegerField(default=0, help_text='Number of users who agree with this diagnosis')),
                ('downvotes', models.PositiveIntegerField(default=0, help_text='Number of users who disagree with this diagnosis')),
                ('is_accepted', models.BooleanField(default=False, help_text='Has the requesting user accepted this diagnosis?')),
                ('is_primary', models.BooleanField(default=False, help_text='Is this the primary/best diagnosis for this request?')),
                ('stored_to_database', models.BooleanField(default=False, help_text='Has this high-confidence result been stored to local database?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('diagnosed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='disease_diagnoses_given', to=settings.AUTH_USER_MODEL)),
                ('identified_disease', models.ForeignKey(blank=True, help_text='Disease identified from our local database', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='diagnosis_results', to='plant_identification.plantdiseasedatabase')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diagnosis_results', to='plant_identification.plantdiseaserequest')),
            ],
            options={
                'ordering': ['-confidence_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SavedDiagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for secure references', unique=True)),
                ('personal_notes', models.TextField(blank=True, help_text="User's personal notes about this diagnosis and treatment")),
                ('treatment_status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'Treatment in Progress'), ('successful', 'Successfully Treated'), ('failed', 'Treatment Failed'), ('monitoring', 'Monitoring Progress')], default='not_started', help_text='Current treatment status', max_length=20)),
                ('plant_recovered', models.BooleanField(blank=True, help_text='Did the plant recover? (null = unknown/in progress)', null=True)),
                ('share_with_community', models.BooleanField(default=False, help_text='Share this diagnosis experience with the community')),
                ('saved_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('diagnosis_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_by_users', to='plant_identification.plantdiseaseresult')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_diagnoses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-saved_at'],
            },
        ),
        migrations.CreateModel(
            name='TreatmentAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_date', models.DateField(help_text='Date when treatment was started')),
                ('completed_date', models.DateField(blank=True, help_text='Date when treatment was completed (if applicable)', null=True)),
                ('effectiveness_rating', models.IntegerField(blank=True, choices=[(1, '1 - Not effective'), (2, '2 - Slightly effective'), (3, '3 - Moderately effective'), (4, '4 - Very effective'), (5, '5 - Completely effective')], help_text="User's rating of treatment effectiveness", null=True)),
                ('success', models.BooleanField(blank=True, help_text='Was this treatment successful? (null = in progress)', null=True)),
                ('user_notes', models.TextField(blank=True, help_text="User's notes about this treatment attempt")),
                ('side_effects', models.TextField(blank=True, help_text='Any negative effects or problems encountered')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('saved_diagnosis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='plant_identification.saveddiagnosis')),
                ('treatment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='plant_identification.diseasecareinstructions')),
            ],
            options={
                'ordering': ['-started_date'],
            },
        ),
        migrations.AddField(
            model_name='saveddiagnosis',
            name='treatments_tried',
            field=models.ManyToManyField(help_text='Treatments the user has tried for this diagnosis', related_name='tried_by_users', through='plant_identification.TreatmentAttempt', to='plant_identification.diseasecareinstructions'),
        ),
        migrations.AddIndex(
            model_name='plantdiseaserequest',
            index=models.Index(fields=['-created_at'], name='plant_ident_created_c092f0_idx'),
        ),
        migrations.AddIndex(
            model_name='plantdiseaserequest',
            index=models.Index(fields=['user', '-created_at'], name='plant_ident_user_id_47ba4e_idx'),
        ),
        migrations.AddIndex(
            model_name='plantdiseaserequest',
            index=models.Index(fields=['status'], name='plant_ident_status_48d2c0_idx'),
        ),
        migrations.AddIndex(
            model_name='plantdiseaseresult',
            index=models.Index(fields=['request', '-confidence_score'], name='plant_ident_request_cf3717_idx'),
        ),
        migrations.AddIndex(
            model_name='plantdiseaseresult',
            index=models.Index(fields=['identified_disease'], name='plant_ident_identif_219a2f_idx'),
        ),
        migrations.AddIndex(
            model_name='plantdiseaseresult',
            index=models.Index(fields=['-created_at'], name='plant_ident_created_578abb_idx'),
        ),
        migrations.AddIndex(
            model_name='plantdiseaseresult',
            index=models.Index(fields=['confidence_score'], name='plant_ident_confide_a15a14_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='treatmentattempt',
            unique_together={('saved_diagnosis', 'treatment')},
        ),
        migrations.AlterUniqueTogether(
            name='saveddiagnosis',
            unique_together={('user', 'diagnosis_result')},
        ),
    ]
