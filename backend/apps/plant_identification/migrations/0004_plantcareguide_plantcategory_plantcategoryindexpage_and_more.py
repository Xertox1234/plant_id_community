# Generated by Django 5.2.4 on 2025-08-11 17:46

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('plant_identification', '0003_plantidentificationresult_uuid_and_more'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('wagtailcore', '0094_alter_page_locale'),
        ('wagtailimages', '0027_image_description'),
    ]

    operations = [
        migrations.CreateModel(
            name='PlantCareGuide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('care_difficulty', models.CharField(choices=[('very_easy', 'Very Easy'), ('easy', 'Easy'), ('moderate', 'Moderate'), ('challenging', 'Challenging'), ('difficult', 'Difficult')], default='moderate', max_length=20)),
                ('quick_care_summary', wagtail.fields.RichTextField(help_text='Brief summary of care requirements')),
                ('care_content', wagtail.fields.StreamField([('heading', 0), ('paragraph', 1), ('care_tip', 5), ('seasonal_care', 8), ('problem_solution', 9), ('image', 10), ('gallery', 14)], block_lookup={0: ('wagtail.blocks.CharBlock', (), {'icon': 'title', 'template': 'plant_identification/blocks/heading.html'}), 1: ('wagtail.blocks.RichTextBlock', (), {'icon': 'pilcrow', 'template': 'plant_identification/blocks/paragraph.html'}), 2: ('wagtail.blocks.CharBlock', (), {}), 3: ('wagtail.blocks.RichTextBlock', (), {}), 4: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')]}), 5: ('wagtail.blocks.StructBlock', [[('tip_title', 2), ('tip_content', 3), ('difficulty_level', 4)]], {'icon': 'help', 'template': 'plant_identification/blocks/care_tip.html'}), 6: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('spring', 'Spring'), ('summer', 'Summer'), ('autumn', 'Autumn/Fall'), ('winter', 'Winter')]}), 7: ('wagtail.blocks.RichTextBlock', (), {'required': False}), 8: ('wagtail.blocks.StructBlock', [[('season', 6), ('care_instructions', 3), ('special_notes', 7)]], {'icon': 'date', 'template': 'plant_identification/blocks/seasonal_care.html'}), 9: ('wagtail.blocks.StructBlock', [[('problem', 2), ('symptoms', 3), ('solution', 3), ('prevention', 7)]], {'icon': 'warning', 'template': 'plant_identification/blocks/problem_solution.html'}), 10: ('wagtail.images.blocks.ImageChooserBlock', (), {'icon': 'image', 'template': 'plant_identification/blocks/image.html'}), 11: ('wagtail.blocks.CharBlock', (), {'required': False}), 12: ('wagtail.images.blocks.ImageChooserBlock', (), {}), 13: ('wagtail.blocks.ListBlock', (12,), {'max_num': 8, 'min_num': 2}), 14: ('wagtail.blocks.StructBlock', [[('gallery_title', 11), ('images', 13)]], {'icon': 'image', 'template': 'plant_identification/blocks/gallery.html'})}, help_text='Detailed care instructions using content blocks')),
                ('light_description', models.TextField(blank=True, help_text='Detailed light requirements description')),
                ('watering_description', models.TextField(blank=True, help_text='Detailed watering instructions')),
                ('soil_description', models.TextField(blank=True, help_text='Soil requirements and recommendations')),
                ('temperature_description', models.TextField(blank=True, help_text='Temperature preferences and tolerance')),
                ('humidity_description', models.TextField(blank=True, help_text='Humidity requirements')),
                ('fertilizing_description', models.TextField(blank=True, help_text='Fertilizing schedule and recommendations')),
                ('propagation_methods', models.TextField(blank=True, help_text='How to propagate this plant')),
                ('common_problems', models.TextField(blank=True, help_text='Common issues and solutions')),
                ('seasonal_notes', models.TextField(blank=True, help_text='Special seasonal care considerations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_featured', models.BooleanField(default=False, help_text='Feature this care guide')),
                ('plant_species', models.OneToOneField(help_text='Plant species this care guide is for', on_delete=django.db.models.deletion.CASCADE, related_name='care_guide', to='plant_identification.plantspecies')),
                ('tags', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='Tags for categorizing care guides', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Plant Care Guide',
                'verbose_name_plural': 'Plant Care Guides',
                'ordering': ['plant_species__scientific_name'],
            },
        ),
        migrations.CreateModel(
            name='PlantCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Category name (e.g., 'Houseplants', 'Succulents', 'Herbs')", max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description')),
                ('icon', models.CharField(blank=True, help_text="CSS icon class (e.g., 'fas fa-leaf')", max_length=50)),
                ('color', models.CharField(default='#28a745', help_text='Category color (hex code)', max_length=7)),
                ('is_featured', models.BooleanField(default=False, help_text='Show this category prominently')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('cover_image', models.ForeignKey(blank=True, help_text='Cover image for the category', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('plant_species', modelcluster.fields.ParentalManyToManyField(blank=True, help_text='Plant species in this category', to='plant_identification.plantspecies')),
            ],
            options={
                'verbose_name': 'Plant Category',
                'verbose_name_plural': 'Plant Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PlantCategoryIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('meta_description', models.TextField(blank=True, help_text='Meta description for search engines', max_length=160)),
                ('introduction', wagtail.fields.RichTextField(blank=True, help_text='Introduction to plant categories')),
                ('categories_per_page', models.IntegerField(default=12, help_text='Number of categories to display per page')),
                ('show_featured_plants', models.BooleanField(default=True, help_text='Show featured plants section')),
                ('social_image', models.ForeignKey(blank=True, help_text='Image for social media sharing', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Plant Category Index Page',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='PlantSpeciesPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('meta_description', models.TextField(blank=True, help_text='Meta description for search engines', max_length=160)),
                ('introduction', wagtail.fields.RichTextField(help_text='Introduction to this plant species')),
                ('content_blocks', wagtail.fields.StreamField([('heading', 0), ('paragraph', 1), ('care_tip', 5), ('seasonal_care', 8), ('problem_solution', 9), ('image', 10), ('gallery', 14)], block_lookup={0: ('wagtail.blocks.CharBlock', (), {'icon': 'title', 'template': 'plant_identification/blocks/heading.html'}), 1: ('wagtail.blocks.RichTextBlock', (), {'icon': 'pilcrow', 'template': 'plant_identification/blocks/paragraph.html'}), 2: ('wagtail.blocks.CharBlock', (), {}), 3: ('wagtail.blocks.RichTextBlock', (), {}), 4: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')]}), 5: ('wagtail.blocks.StructBlock', [[('tip_title', 2), ('tip_content', 3), ('difficulty_level', 4)]], {'icon': 'help', 'template': 'plant_identification/blocks/care_tip.html'}), 6: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('spring', 'Spring'), ('summer', 'Summer'), ('autumn', 'Autumn/Fall'), ('winter', 'Winter')]}), 7: ('wagtail.blocks.RichTextBlock', (), {'required': False}), 8: ('wagtail.blocks.StructBlock', [[('season', 6), ('care_instructions', 3), ('special_notes', 7)]], {'icon': 'date', 'template': 'plant_identification/blocks/seasonal_care.html'}), 9: ('wagtail.blocks.StructBlock', [[('problem', 2), ('symptoms', 3), ('solution', 3), ('prevention', 7)]], {'icon': 'warning', 'template': 'plant_identification/blocks/problem_solution.html'}), 10: ('wagtail.images.blocks.ImageChooserBlock', (), {'icon': 'image', 'template': 'plant_identification/blocks/image.html'}), 11: ('wagtail.blocks.CharBlock', (), {'required': False}), 12: ('wagtail.images.blocks.ImageChooserBlock', (), {}), 13: ('wagtail.blocks.ListBlock', (12,), {'max_num': 8, 'min_num': 2}), 14: ('wagtail.blocks.StructBlock', [[('gallery_title', 11), ('images', 13)]], {'icon': 'image', 'template': 'plant_identification/blocks/gallery.html'})}, help_text='Detailed plant information and care instructions')),
                ('is_featured', models.BooleanField(default=False, help_text='Feature this plant species')),
                ('categories', modelcluster.fields.ParentalManyToManyField(blank=True, help_text='Categories for this plant', to='plant_identification.plantcategory')),
                ('gallery_images', models.ManyToManyField(blank=True, help_text='Gallery of plant images', to='wagtailimages.image')),
                ('hero_image', models.ForeignKey(blank=True, help_text='Main hero image for this plant', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('plant_species', models.OneToOneField(help_text='Plant species this page represents', on_delete=django.db.models.deletion.CASCADE, related_name='species_page', to='plant_identification.plantspecies')),
                ('social_image', models.ForeignKey(blank=True, help_text='Image for social media sharing', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Plant Species Page',
            },
            bases=('wagtailcore.page',),
        ),
    ]
