# Generated by Django 5.2.5 on 2025-08-23 02:12

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('plant_identification', '0010_add_plant_identification_vote'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BatchIdentificationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this batch identification request', unique=True)),
                ('title', models.CharField(blank=True, help_text="Optional title for this batch (e.g., 'Garden Walk', 'Field Trip')", max_length=200)),
                ('description', models.TextField(blank=True, help_text='Optional description of the batch identification session')),
                ('location', models.CharField(blank=True, help_text='Location where these plants were photographed', max_length=200)),
                ('status', models.CharField(choices=[('uploading', 'Uploading Images'), ('processing', 'Processing with AI'), ('completed', 'Batch Completed'), ('partial', 'Partially Completed'), ('failed', 'Processing Failed')], default='uploading', max_length=20)),
                ('total_images', models.PositiveIntegerField(default=0, help_text='Total number of images in this batch')),
                ('processed_images', models.PositiveIntegerField(default=0, help_text='Number of images successfully processed')),
                ('failed_images', models.PositiveIntegerField(default=0, help_text='Number of images that failed processing')),
                ('processing_started_at', models.DateTimeField(blank=True, help_text='When AI processing started', null=True)),
                ('processing_completed_at', models.DateTimeField(blank=True, help_text='When AI processing completed', null=True)),
                ('job_id', models.CharField(blank=True, help_text='Background job ID for tracking processing status', max_length=255)),
                ('auto_accept_high_confidence', models.BooleanField(default=False, help_text='Automatically accept results with >90% confidence')),
                ('share_with_community', models.BooleanField(default=False, help_text='Share this batch with the community')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_identification_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BatchIdentificationImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for secure references', unique=True)),
                ('original_filename', models.CharField(help_text='Original filename when uploaded', max_length=255)),
                ('upload_order', models.PositiveIntegerField(help_text='Order in which this image was uploaded in the batch')),
                ('latitude', models.FloatField(blank=True, help_text='GPS latitude if available in EXIF data', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='GPS longitude if available in EXIF data', null=True)),
                ('image_quality_score', models.FloatField(blank=True, help_text='Automated image quality assessment (0.0 to 1.0)', null=True)),
                ('quality_issues', models.JSONField(default=list, help_text='List of detected quality issues (blur, lighting, etc.)')),
                ('processing_status', models.CharField(choices=[('pending', 'Pending Processing'), ('processing', 'Processing'), ('completed', 'Processing Completed'), ('failed', 'Processing Failed'), ('skipped', 'Skipped')], default='pending', max_length=20)),
                ('processing_error', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('user_confidence_rating', models.IntegerField(blank=True, choices=[(1, '1 - Very uncertain'), (2, '2 - Somewhat uncertain'), (3, '3 - Neutral'), (4, '4 - Somewhat confident'), (5, '5 - Very confident')], help_text="User's confidence in the identification results", null=True)),
                ('user_notes', models.TextField(blank=True, help_text="User's notes about this specific plant/image")),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, help_text='When processing completed for this image', null=True)),
                ('identification_request', models.OneToOneField(help_text='Individual plant identification request for this image', on_delete=django.db.models.deletion.CASCADE, related_name='batch_image', to='plant_identification.plantidentificationrequest')),
                ('batch_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_images', to='plant_identification.batchidentificationrequest')),
            ],
            options={
                'ordering': ['upload_order'],
            },
        ),
        migrations.CreateModel(
            name='BatchIdentificationComparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for secure references', unique=True)),
                ('comparison_title', models.CharField(blank=True, help_text='Title for this comparison group', max_length=200)),
                ('comparison_notes', models.TextField(blank=True, help_text='User notes about the comparison')),
                ('decision_reasoning', models.TextField(blank=True, help_text="User's reasoning for their selection")),
                ('action_taken', models.CharField(choices=[('none', 'No Action'), ('accept_save', 'Accept & Save to My Plants'), ('ask_community', 'Ask Community for Help'), ('regenerate_care', 'Regenerate Care Instructions'), ('mark_uncertain', 'Mark as Uncertain')], default='none', help_text='Quick action taken by user', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When user completed this comparison', null=True)),
                ('primary_request', models.ForeignKey(help_text='Primary plant identification request', on_delete=django.db.models.deletion.CASCADE, related_name='primary_comparisons', to='plant_identification.plantidentificationrequest')),
                ('secondary_requests', models.ManyToManyField(help_text='Additional requests to compare side-by-side', related_name='secondary_comparisons', to='plant_identification.plantidentificationrequest')),
                ('selected_result', models.ForeignKey(blank=True, help_text='Result selected by user after comparison', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comparison_selections', to='plant_identification.plantidentificationresult')),
                ('batch_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparisons', to='plant_identification.batchidentificationrequest')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BatchProcessingQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('queue_position', models.PositiveIntegerField(help_text='Position in the processing queue')),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('normal', 'Normal Priority'), ('high', 'High Priority'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('max_concurrent_requests', models.PositiveIntegerField(default=3, help_text='Maximum number of concurrent API requests for this batch')),
                ('estimated_completion_time', models.DateTimeField(blank=True, help_text='Estimated completion time based on queue position', null=True)),
                ('worker_id', models.CharField(blank=True, help_text='ID of the background worker processing this batch', max_length=255)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='queued', max_length=20)),
                ('queued_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, help_text='When processing started', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When processing completed', null=True)),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of retry attempts')),
                ('max_retries', models.PositiveIntegerField(default=3, help_text='Maximum number of retry attempts')),
                ('last_error', models.TextField(blank=True, help_text='Last error message if processing failed')),
                ('batch_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='processing_queue_items', to='plant_identification.batchidentificationrequest')),
            ],
            options={
                'ordering': ['priority', 'queue_position', 'queued_at'],
            },
        ),
        migrations.AddIndex(
            model_name='batchidentificationrequest',
            index=models.Index(fields=['-created_at'], name='plant_ident_created_a20aa9_idx'),
        ),
        migrations.AddIndex(
            model_name='batchidentificationrequest',
            index=models.Index(fields=['user', '-created_at'], name='plant_ident_user_id_c95e43_idx'),
        ),
        migrations.AddIndex(
            model_name='batchidentificationrequest',
            index=models.Index(fields=['status'], name='plant_ident_status_fe5a0b_idx'),
        ),
        migrations.AddIndex(
            model_name='batchidentificationimage',
            index=models.Index(fields=['batch_request', 'upload_order'], name='plant_ident_batch_r_4501cb_idx'),
        ),
        migrations.AddIndex(
            model_name='batchidentificationimage',
            index=models.Index(fields=['processing_status'], name='plant_ident_process_a001a5_idx'),
        ),
        migrations.AddIndex(
            model_name='batchidentificationcomparison',
            index=models.Index(fields=['batch_request', '-created_at'], name='plant_ident_batch_r_447a06_idx'),
        ),
        migrations.AddIndex(
            model_name='batchidentificationcomparison',
            index=models.Index(fields=['action_taken'], name='plant_ident_action__bd80b4_idx'),
        ),
        migrations.AddIndex(
            model_name='batchprocessingqueue',
            index=models.Index(fields=['status', 'priority'], name='plant_ident_status_c261be_idx'),
        ),
        migrations.AddIndex(
            model_name='batchprocessingqueue',
            index=models.Index(fields=['queue_position'], name='plant_ident_queue_p_8c2639_idx'),
        ),
    ]
